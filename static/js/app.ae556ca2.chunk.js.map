{"version":3,"sources":["app/assets/background.jpg","app/assets/logo.png","app/firebase/config.js","app/navigation/AuthProvider.js","app/screens/WelcomeScreen.js","app/screens/LoginScreen.js","app/screens/RegistrationScreen.js","app/navigation/AuthStack.js","app/screens/HomeScreen.js","app/screens/Modal.js","app/screens/ChatbotScreen.js","app/navigation/AppStack.js","app/screens/LoadingScreen.js","app/navigation/Routes.js","app/navigation/index.js","App.js","app/assets/emotions/happy.png","app/assets/emotions/sad.png","app/assets/emotions/angry.png","app/assets/emotions/crying.png","app/assets/emotions/laugh.png","app/assets/emotions/nervous.png","app/assets/emotions/surprised.png","app/assets/emotions/confused.png","app/assets/emotions/tired.png"],"names":["module","exports","firebase","apps","length","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","AuthContext","createContext","AuthProvider","children","useState","user","setUser","Provider","value","login","email","password","a","async","auth","signInWithEmailAndPassword","Alert","alert","register","name","createUserWithEmailAndPassword","currentUser","firestore","collection","doc","uid","set","_id","logout","signOut","WelcomeScreen","navigation","ImageBackground","style","styles","background","source","require","View","logoContainer","Image","logo","Text","logoText","TouchableOpacity","loginButton","onPress","navigate","loginButtonText","registerButton","registerButtonText","StyleSheet","create","flex","height","justifyContent","alignItems","width","backgroundColor","marginLeft","marginRight","marginBottom","borderRadius","position","top","fontWeight","color","fontSize","LoginScreen","setEmail","setPassword","useContext","container","blurRadius","keyboardShouldPersistTaps","TextInput","input","placeholder","placeholderTextColor","onChangeText","text","underlineColorAndroid","autoCapitalize","secureTextEntry","button","buttonTitle","footerView","footerText","footerLink","title","alignSelf","margin","overflow","marginTop","paddingLeft","RegistrationScreen","setName","confirmPassword","setConfirmPassword","onRegisterPress","borderColor","Stack","createStackNavigator","AuthStack","Navigator","screenOptions","headerShown","Screen","component","options","HomeScreen","useEffect","isMounted","get","exists","data","console","log","getUserInfo","greeting","buttonText","logOutButton","Modal","props","Platform","OS","emotionImages","letsChatMessages","kindMessages","emotions","ChatbotScreen","currentMessage","setCurrentMessage","showEmotions","setShowEmotions","chatsRef","query","orderBy","useCollectionData","idField","messages","id","setId","useLayoutEffect","getEmotion","index","add","createdAt","Date","parse","emotionIndex","emotion","sendMessage","chatBotContainer","buttonContainer","randomId","Math","random","toString","substring","floor","getTime","sendLetsChat","chatButtonText","sendKindMessage","onSend","Keyboard","dismiss","renderAvatar","messageInfo","emotionImage","rounded","size","createAvatar","showUserAvatar","showAvatarForEveryMessage","renderAllAvatars","renderBubble","textStyle","right","left","timeTextStyle","wrapperStyle","createBubble","alwaysShowSend","transparent","visible","emotionPopUp","textAlign","emotionContainer","emotionButton","activeOpacity","buttonImage","flexDirection","lineHeight","display","flexWrap","alignContent","marginVertical","marginHorizontal","padding","minWidth","AppStack","Loading","ActivityIndicator","Routes","initializing","setInitializing","loading","setLoading","onAuthStateChanged","result","NavigationContainer","Providers","App","LogBox","ignoreLogs"],"mappings":"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","file":"static/js/app.ae556ca2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.afe8d931.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.993f2c0b.png\";","import firebase from 'firebase';\nimport '@firebase/auth'\nimport '@firebase/firestore'\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBLo3MIDiCutOt63VqJNkEMgLbI71gxBDE\",\n  authDomain: \"chatapp-6a550.firebaseapp.com\",\n  databaseURL: \"https://chatapp-6a550-default-rtdb.firebaseio.com\",\n  projectId: \"chatapp-6a550\",\n  storageBucket: \"chatapp-6a550.appspot.com\",\n  messagingSenderId: \"432038414833\",\n  appId: \"1:432038414833:web:6a8228bf2fd1f997219c50\"\n};\n\nif (firebase.apps.length === 0) {\n    firebase.initializeApp(firebaseConfig)\n}\n\nexport { firebase }\n","import React, { createContext, useState } from 'react';\nimport { Alert } from 'react-native';\nimport { firebase } from '../firebase/config'\n\nexport const AuthContext = createContext({});\n\nexport const AuthProvider = ({ children }) => {\n    const [user, setUser] = useState(null);\n\n    return (\n        <AuthContext.Provider\n            value={{\n                user,\n                setUser,\n                login: async (email, password) => {\n                    try {\n                        await firebase.auth().signInWithEmailAndPassword(email, password);\n                    } catch (error) {\n                        Alert.alert('Error', error+\"\");\n                    }\n                },\n                register: async (email, password, name) => {\n                    try { \n                        await firebase.auth().createUserWithEmailAndPassword(email, password);\n                        const currentUser = firebase.auth().currentUser;\n                        const db = firebase.firestore();\n                        db.collection('users')\n                            .doc(currentUser.uid)\n                            .set({\n                                _id: currentUser.uid,\n                                email: currentUser.email,\n                                name: name\n                        });\n                    } catch (error) {\n                        Alert.alert('Error', error+\"\");\n                    }\n                },\n                logout: async () => {\n                    try {\n                        await firebase.auth().signOut();\n                    } catch (error) {\n                        Alert.alert('Error', error+\"\");\n                    }\n                }\n            }}\n        >\n            {children}\n        </AuthContext.Provider>\n    );\n};","import { Image, ImageBackground, StyleSheet, View, Text, TouchableOpacity } from 'react-native';\nimport React from 'react';\n\nexport default function WelcomeScreen({ navigation }) {\n    return (\n        <ImageBackground \n            style={styles.background}\n            source={require(\"../assets/background.jpg\")} >\n            <View style={styles.logoContainer}>\n                <Image source={require(\"../assets/logo.png\")} style={styles.logo}/>\n                <Text style={styles.logoText} >MIND BOT</Text>\n            </View>\n            <TouchableOpacity\n                style={styles.loginButton} \n                onPress={() => navigation.navigate(\"Login\")}>\n                <Text style={styles.loginButtonText}>Sign In</Text>\n            </TouchableOpacity>\n            <TouchableOpacity\n                style={styles.registerButton}\n                onPress={() => navigation.navigate(\"Registration\")}>\n                <Text style={styles.registerButtonText}>Create Account</Text>\n            </TouchableOpacity>\n        </ImageBackground>\n    );\n}\n\nconst styles = StyleSheet.create({\n    background: {\n        flex: 1,\n        height: '100%',\n        justifyContent: \"flex-end\",\n        alignItems: 'center'\n    },\n    loginButton: {\n        width: \"80%\",\n        backgroundColor: '#788eec',\n        marginLeft: 30,\n        marginRight: 30,\n        marginBottom: 20,\n        height: 48,\n        borderRadius: 5,\n        alignItems: \"center\",\n        justifyContent: 'center'\n    },\n    registerButton: {\n        width: \"80%\",\n        backgroundColor: '#ffffff',\n        marginLeft: 30,\n        marginRight: 30,\n        marginBottom: 50,\n        height: 48,\n        borderRadius: 5,\n        alignItems: \"center\",\n        justifyContent: 'center'\n    },\n    logo: {\n        width: 100,\n        height: 100,\n    },\n    logoContainer: {\n        position: 'absolute',\n        top: 90,\n        alignItems: 'center',\n    },\n    logoText: {\n        fontWeight: 'bold',\n        color: '#ffffff'\n    },\n    loginButtonText: {\n        fontSize: 20,\n        fontWeight: 'bold',\n        color: 'white',\n    },\n    registerButtonText: {\n        fontSize: 20,\n        fontWeight: 'bold',\n        color: '#788eec',\n    }\n})\n","import React, { useState, useContext } from 'react'\nimport { StyleSheet, Image, Text, TextInput, TouchableOpacity, View, ImageBackground } from 'react-native'\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\nimport { AuthContext } from '../navigation/AuthProvider';\n\nexport default function LoginScreen({navigation}) {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const { login } = useContext(AuthContext);\n\n    const onFooterLinkPress = () => {\n        navigation.navigate('Registration');\n    }\n\n    const onLoginPress = () => {\n        if (!email) {\n            Alert.alert('Email field is required.');\n        } else if (!password) {\n            Alert.alert('Password field is required.');\n        } else {\n            login(email, password);\n            setEmail('');\n            setPassword('');\n        }\n    }\n\n    return (\n        <ImageBackground \n            style={styles.container}\n            source={require(\"../assets/background.jpg\")} \n            blurRadius={5} >\n            <KeyboardAwareScrollView\n                style={{ flex: 1, width: '100%' }}\n                keyboardShouldPersistTaps=\"always\">\n                <Image\n                    style={styles.logo}\n                    source={require('../assets/logo.png')}\n                />\n                <TextInput\n                    style={styles.input}\n                    placeholder='E-mail'\n                    placeholderTextColor=\"#aaaaaa\"\n                    onChangeText={(text) => setEmail(text)}\n                    value={email}\n                    underlineColorAndroid=\"transparent\"\n                    autoCapitalize=\"none\"\n                />\n                <TextInput\n                    style={styles.input}\n                    placeholderTextColor=\"#aaaaaa\"\n                    secureTextEntry\n                    placeholder='Password'\n                    onChangeText={(text) => setPassword(text)}\n                    value={password}\n                    underlineColorAndroid=\"transparent\"\n                    autoCapitalize=\"none\"\n                />\n                <TouchableOpacity\n                    style={styles.button}\n                    onPress={() => onLoginPress()}>\n                    <Text style={styles.buttonTitle}>Log in</Text>\n                </TouchableOpacity>\n                <View style={styles.footerView}>\n                    <Text style={styles.footerText}>Don't have an account? <Text onPress={onFooterLinkPress} style={styles.footerLink}>Sign up</Text></Text>\n                </View>\n            </KeyboardAwareScrollView>\n        </ImageBackground>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        alignItems: 'center'\n    },\n    title: {\n\n    },\n    logo: {\n        flex: 1,\n        height: 120,\n        width: 120,\n        alignSelf: \"center\",\n        margin: 30\n    },\n    input: {\n        height: 48,\n        borderRadius: 5,\n        overflow: 'hidden',\n        backgroundColor: 'white',\n        marginTop: 10,\n        marginBottom: 10,\n        marginLeft: 30,\n        marginRight: 30,\n        paddingLeft: 16\n    },\n    button: {\n        backgroundColor: '#788eec',\n        marginLeft: 30,\n        marginRight: 30,\n        marginTop: 20,\n        height: 48,\n        borderRadius: 5,\n        alignItems: \"center\",\n        justifyContent: 'center'\n    },\n    buttonTitle: {\n        color: 'white',\n        fontSize: 16,\n        fontWeight: \"bold\"\n    },\n    footerView: {\n        flex: 1,\n        alignItems: \"center\",\n        marginTop: 20\n    },\n    footerText: {\n        fontSize: 16,\n        color: '#ffffff'\n    },\n    footerLink: {\n        color: \"#788eec\",\n        fontWeight: \"bold\",\n        fontSize: 16\n    }\n})\n","import React, { useState, useContext } from 'react'\nimport { StyleSheet, Image, Text, TextInput, TouchableOpacity, View, ImageBackground } from 'react-native'\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\nimport { AuthContext } from '../navigation/AuthProvider';\n\nexport default function RegistrationScreen({navigation}) {\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [confirmPassword, setConfirmPassword] = useState('')\n    const { register } = useContext(AuthContext);\n\n    const onFooterLinkPress = () => {\n        navigation.navigate('Login');\n    }\n\n    const onRegisterPress = () => {\n        if (!name) {\n            Alert.alert('Name is required.');\n        } else if (!email) {\n            Alert.alert('Email is required.');\n        } else if (!password) {\n            Alert.alert('Password is required.');\n        } else if (password !== confirmPassword) {\n            Alert.alert(\"Passwords don't match\");\n            return\n        } else {\n            register(email, password, name);\n            setName('');\n            setEmail('');\n            setPassword('');\n            setConfirmPassword('');\n        }\n    }\n\n    return (\n        <ImageBackground \n            style={styles.container}\n            source={require(\"../assets/background.jpg\")} \n            blurRadius={5}  >\n            <KeyboardAwareScrollView\n                style={{ flex: 1, width: '100%' }}\n                keyboardShouldPersistTaps=\"always\">\n                <Image\n                    style={styles.logo}\n                    source={require('../assets/logo.png')}\n                />\n                <TextInput\n                    style={styles.input}\n                    placeholder='Name'\n                    placeholderTextColor=\"#aaaaaa\"\n                    onChangeText={(text) => setName(text)}\n                    value={name}\n                    underlineColorAndroid=\"transparent\"\n                    autoCapitalize=\"none\"\n                />\n                <TextInput\n                    style={styles.input}\n                    placeholder='E-mail'\n                    placeholderTextColor=\"#aaaaaa\"\n                    onChangeText={(text) => setEmail(text)}\n                    value={email}\n                    underlineColorAndroid=\"transparent\"\n                    autoCapitalize=\"none\"\n                />\n                <TextInput\n                    style={styles.input}\n                    placeholderTextColor=\"#aaaaaa\"\n                    secureTextEntry\n                    placeholder='Password'\n                    onChangeText={(text) => setPassword(text)}\n                    value={password}\n                    underlineColorAndroid=\"transparent\"\n                    autoCapitalize=\"none\"\n                />\n                <TextInput\n                    style={styles.input}\n                    placeholderTextColor=\"#aaaaaa\"\n                    secureTextEntry\n                    placeholder='Confirm Password'\n                    onChangeText={(text) => setConfirmPassword(text)}\n                    value={confirmPassword}\n                    underlineColorAndroid=\"transparent\"\n                    autoCapitalize=\"none\"\n                />\n                <TouchableOpacity\n                    style={styles.button}\n                    onPress={() => onRegisterPress()}>\n                    <Text style={styles.buttonTitle}>Create account</Text>\n                </TouchableOpacity>\n                <View style={styles.footerView}>\n                    <Text style={styles.footerText}>Already got an account? <Text onPress={onFooterLinkPress} style={styles.footerLink}>Log in</Text></Text>\n                </View>\n            </KeyboardAwareScrollView>\n        </ImageBackground>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        alignItems: 'center'\n    },\n    title: {\n\n    },\n    logo: {\n        flex: 1,\n        height: 120,\n        width: 120,\n        alignSelf: \"center\",\n        margin: 30\n    },\n    input: {\n        height: 48,\n        borderRadius: 5,\n        overflow: 'hidden',\n        backgroundColor: 'white',\n        marginTop: 10,\n        marginBottom: 10,\n        marginLeft: 30,\n        marginRight: 30,\n        paddingLeft: 16,\n        borderColor: \"black\"\n    },\n    button: {\n        backgroundColor: '#788eec',\n        marginLeft: 30,\n        marginRight: 30,\n        marginTop: 20,\n        height: 48,\n        borderRadius: 5,\n        alignItems: \"center\",\n        justifyContent: 'center'\n    },\n    buttonTitle: {\n        color: 'white',\n        fontSize: 16,\n        fontWeight: \"bold\"\n    },\n    footerView: {\n        flex: 1,\n        alignItems: \"center\",\n        marginTop: 20\n    },\n    footerText: {\n        fontSize: 16,\n        color: '#ffffff'\n    },\n    footerLink: {\n        color: \"#788eec\",\n        fontWeight: \"bold\",\n        fontSize: 16\n    }\n})","import * as React from 'react';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport WelcomeScreen from '../screens/WelcomeScreen';\nimport LoginScreen from '../screens/LoginScreen';\nimport RegistrationScreen from '../screens/RegistrationScreen';\n\nconst Stack = createStackNavigator()\n\nexport default function AuthStack() {\n    return (\n        <Stack.Navigator screenOptions={{ headerShown: true }}>\n            <Stack.Screen name='Welcome' component={WelcomeScreen} options={{ headerShown: false }} />\n            <Stack.Screen name='Login' component={LoginScreen} />\n            <Stack.Screen name='Registration' component={RegistrationScreen} />\n        </Stack.Navigator>\n    );\n}","import React, { useContext, useState, useEffect } from 'react';\nimport { StyleSheet, TouchableOpacity, Text, ImageBackground } from 'react-native';\nimport { firebase } from '../firebase/config';\nimport { AuthContext } from '../navigation/AuthProvider';\n\nexport default function HomeScreen({ navigation }) {\n    const { user, logout } = useContext(AuthContext);\n    const [name, setName] = useState('');\n\n    const onLogOutPress = () => {\n        logout();\n    }\n\n    useEffect(() => {\n        let isMounted = true;\n        async function getUserInfo() {\n            try {\n                let doc = await firebase\n                    .firestore()\n                    .collection('users')\n                    .doc(user.uid)\n                    .get();\n\n                if (!doc.exists) {\n                    console.log('User data not found');\n                } else {\n                    let data = doc.data();\n                    if (isMounted) setName(data.name);\n                }\n            } catch (error) {\n                console.log(error);\n            }\n        }\n        getUserInfo();\n        return () => { isMounted = false }\n    })\n\n    return (\n        <ImageBackground \n            source={require(\"../assets/background.jpg\")}\n            blurRadius={1.25}\n            style={styles.container}>\n            <Text style={styles.greeting}>Hello {name}</Text>\n            <TouchableOpacity \n                style={styles.button}\n                onPress={() => navigation.navigate(\"Home\")} >\n                <Text style={styles.buttonText}>Mindfulness</Text>\n            </TouchableOpacity>\n            <TouchableOpacity \n                style={styles.button}\n                onPress={() => navigation.navigate(\"Chatbot\")} >\n                <Text style={styles.buttonText}>Chat Bot</Text>\n            </TouchableOpacity>\n            <TouchableOpacity \n                style={styles.button}\n                onPress={() => navigation.navigate(\"Home\")} >\n                <Text style={styles.buttonText}>Instant</Text>\n            </TouchableOpacity>\n            <TouchableOpacity \n                style={styles.logOutButton}\n                onPress={onLogOutPress} >\n                <Text style={styles.buttonText}>Log Out</Text>\n            </TouchableOpacity>\n        </ImageBackground>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        alignItems: \"center\",\n        justifyContent: \"center\",\n    },\n    greeting: {\n        fontSize: 22,\n        fontWeight: 'bold',\n        color: '#383838',\n        marginTop: 100,\n        marginBottom: 30,\n    },\n    button: {\n        width: \"75%\",\n        height: 75,\n        backgroundColor: '#788eec',\n        marginLeft: 30,\n        marginRight: 30,\n        marginTop: 25,\n        marginBottom: 25,\n        borderRadius: 5,\n        alignItems: \"center\",\n        justifyContent: 'center'\n    },\n    logOutButton: {\n        width: \"55%\",\n        height: 50,\n        backgroundColor: '#ff7269',\n        marginLeft: 30,\n        marginRight: 30,\n        marginTop: 100,\n        borderRadius: 5,\n        alignItems: \"center\",\n        justifyContent: 'center'\n    },\n    buttonText: {\n        fontSize: 20,\n        fontWeight: 'bold',\n        color: \"white\"\n    },\n})","import React from 'react';\nimport WebModal from 'modal-react-native-web';\nimport {Modal as AppModal} from 'react-native';\nimport { Platform } from 'react-native';\n\nconst Modal = (props) => {\n    if (Platform.OS === 'web') {\n        return (\n            <WebModal {...props}>\n                {props.children}\n            </WebModal>\n        );\n    } else {\n        return (\n            <AppModal {...props}>\n                {props.children}\n            </AppModal>\n        );\n    }\n}\n\nexport default Modal;","import React, { useState, useContext, useLayoutEffect } from 'react';\nimport { GiftedChat, Bubble } from 'react-native-gifted-chat';\nimport { StyleSheet, View, Image, Text, Keyboard, TouchableOpacity, Button } from 'react-native';\nimport { Avatar } from \"react-native-elements\";\nimport firebase from 'firebase';\nimport 'firebase/firestore';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\nimport Modal from './Modal.js';\nimport { AuthContext } from '../navigation/AuthProvider';\n\nlet emotionImages = [\n    require('../assets/emotions/happy.png'),\n    require('../assets/emotions/sad.png'),\n    require('../assets/emotions/angry.png'),\n    require('../assets/emotions/crying.png'),\n    require('../assets/emotions/laugh.png'),\n    require('../assets/emotions/nervous.png'),\n    require('../assets/emotions/surprised.png'),\n    require('../assets/emotions/confused.png'),\n    require('../assets/emotions/tired.png'),\n  ];\n\nconst letsChatMessages = [\n  \"How are you doing today?\",\n  \"Hey, how's it going?\",\n  \"How are you feeling?\",\n  \"How was your day?\",\n  \"How have you been?\",\n  \"What have you been up to?\",\n  \"How's everyting going?\",\n  \"What’s new with you?\",\n];\n\nconst kindMessages = [\n  \"You are loved and appreciated\",\n  \"You are amazing just the way you are\",\n  \"You can acomplish anything you put your mind to\",\n  \"You are braver than you believe, stronger than you seem, and smarter than you think\",\n  \"You are great\",\n];\n\nconst emotions = ['Happy', 'Sad', 'Angry', 'Crying', 'Laughing', 'Nervous', 'Surprised', 'Confused', 'Tired', 'None'];\n\nexport default function ChatbotScreen({ navigation }, props) {\n  \n  const [currentMessage, setCurrentMessage] = useState(null);\n  const [showEmotions, setShowEmotions] = useState(false);\n  const { user } = useContext(AuthContext);\n  const db = firebase.firestore();\n  const chatsRef = db.collection(user.uid);\n  const query = chatsRef.orderBy('createdAt', 'desc');\n  const [messages] = useCollectionData(query, { idField: 'id' });\n  const [id, setId] = useState('');\n  const [name, setName] = useState('');\n\n  useLayoutEffect(() => {\n        let isMounted = true;\n        async function getUserInfo() {\n            try {\n                let doc = await firebase\n                    .firestore()\n                    .collection('users')\n                    .doc(user.uid)\n                    .get();\n\n                if (!doc.exists) {\n                    console.log('User data not found');\n                } else {\n                    let data = doc.data();\n                    if (isMounted) {\n                      setName(data.name);\n                      setId(data._id);\n                    } \n                }\n            } catch (error) {\n                console.log(error);\n            }\n        }\n        getUserInfo();\n        return () => { isMounted = false }\n    })\n\n  const sendMessage = (index) => {\n\n    chatsRef.add({\n      _id: currentMessage[0]._id,\n      text: currentMessage[0].text,\n      createdAt: Date.parse(currentMessage[0].createdAt),\n      emotionIndex: index,\n      emotion: emotions[index],\n      user: {\n        _id: id,\n        name: name\n      }\n    })\n    setCurrentMessage(null);\n  }\n\n  const createAvatar = (messageInfo) => {\n\n    // If the emotion the user selects is \"None\"\n    if (messageInfo.currentMessage.emotionIndex == emotionImages.length) {\n      return null;\n\n    } else {\n\n      var emotionImage = emotionImages[messageInfo.currentMessage.emotionIndex];\n\n      return(\n        <Avatar\n          rounded\n          size = 'medium'\n          source = {emotionImage}\n        ></Avatar>\n      )\n    }\n  }\n\n  const createBubble = (messages) => {\n\n    return (\n      <Bubble\n        {... messages}\n\n        textStyle={{\n          right: {\n            color: 'black',\n          },\n          left: {\n            color: 'black',\n          },\n        }}\n\n        timeTextStyle={{\n          left: { \n             color: 'black' \n          },\n          right: { \n            color:'black'\n          } \n        }}\n\n        wrapperStyle={{\n          left: {\n            backgroundColor: '#F2AE6F',\n          },\n          right: {\n            backgroundColor: '#99BBFF'\n          },\n        }}\n\n        user={messages.currentMessage.user}\n      />\n    )\n  }\n\n  const getEmotion = (index) => {\n\n    setShowEmotions(false);\n    sendMessage(index);\n  }\n\n  const sendLetsChat = () => {\n\n    const randomId = Math.random().toString(36).substring(2);\n\n    chatsRef.add({\n      _id: randomId,\n      text: letsChatMessages[Math.floor(Math.random() * letsChatMessages.length)],\n      createdAt: new Date().getTime(),\n      emotionIndex: 0,\n      emotion: emotions[0],\n      user: {\n        _id: 'NICUiyNjJBRQHccSDjRvZzOi3Pj2',\n        name: 'MindBot'\n      }\n    })\n  }\n\n  const sendKindMessage = () => {\n\n    const randomId = Math.random().toString(36).substring(2);\n\n    chatsRef.add({\n      _id: randomId,\n      text: kindMessages[Math.floor(Math.random() * kindMessages.length)],\n      createdAt: new Date().getTime(),\n      emotionIndex: 0,\n      emotion: emotions[0],\n      user: {\n        _id: 'NICUiyNjJBRQHccSDjRvZzOi3Pj2',\n        name: 'MindBot'\n      }\n    })\n  }\n\n  return (\n          <View style={styles.chatBotContainer}>\n            <View style={styles.buttonContainer}>\n              <TouchableOpacity\n                style={styles.button}\n                onPress={() => sendLetsChat()}\n              >\n                <Text style={styles.chatButtonText}>Let's Chat</Text>\n              </TouchableOpacity>\n              <TouchableOpacity\n                style={styles.button}\n                onPress={() => sendKindMessage()}\n              >\n                <Text style={styles.chatButtonText}>Send a kind message</Text>\n              </TouchableOpacity>\n            </View>\n            <GiftedChat\n              messages={messages}\n              user={{\n                _id: id,\n                name: name\n              }}\n              onSend={(messages) => {Keyboard.dismiss(); setCurrentMessage(messages); setShowEmotions(true);}}\n              renderAvatar={(messages) => createAvatar(messages)}\n              showUserAvatar={true}\n              showAvatarForEveryMessage={true}\n              renderAllAvatars={true}\n              renderBubble={(messages) => createBubble(messages)}\n              alwaysShowSend={true}\n            />\n            <Modal transparent={true} visible={showEmotions}>\n              <View style={{backgroundColor:\"#000000aa\", flex:1}}>\n                <View style={styles.emotionPopUp}>\n                  <Text style={{textAlign: 'center'}}>Select an emotion for your message</Text>\n                  <View style={styles.emotionContainer}>\n                    <TouchableOpacity style={styles.emotionButton} activeOpacity={0.5} onPress={() => getEmotion(0)}><Image style={styles.buttonImage} source={emotionImages[0]}/><Text style={styles.buttonText}>Happy</Text></TouchableOpacity>\n                    <TouchableOpacity style={styles.emotionButton} activeOpacity={0.5} onPress={() => getEmotion(1)}><Image style={styles.buttonImage} source={emotionImages[1]}/><Text style={styles.buttonText}>Sad</Text></TouchableOpacity>\n                    <TouchableOpacity style={styles.emotionButton} activeOpacity={0.5} onPress={() => getEmotion(2)}><Image style={styles.buttonImage} source={emotionImages[2]}/><Text style={styles.buttonText}>Angry</Text></TouchableOpacity>\n                    <TouchableOpacity style={styles.emotionButton} activeOpacity={0.5} onPress={() => getEmotion(3)}><Image style={styles.buttonImage} source={emotionImages[3]}/><Text style={styles.buttonText}>Crying</Text></TouchableOpacity>\n                    <TouchableOpacity style={styles.emotionButton} activeOpacity={0.5} onPress={() => getEmotion(4)}><Image style={styles.buttonImage} source={emotionImages[4]}/><Text style={styles.buttonText}>Laughing</Text></TouchableOpacity>\n                    <TouchableOpacity style={styles.emotionButton} activeOpacity={0.5} onPress={() => getEmotion(5)}><Image style={styles.buttonImage} source={emotionImages[5]}/><Text style={styles.buttonText}>Nervous</Text></TouchableOpacity>\n                    <TouchableOpacity style={styles.emotionButton} activeOpacity={0.5} onPress={() => getEmotion(6)}><Image style={styles.buttonImage} source={emotionImages[6]}/><Text style={styles.buttonText}>Surprised</Text></TouchableOpacity>\n                    <TouchableOpacity style={styles.emotionButton} activeOpacity={0.5} onPress={() => getEmotion(7)}><Image style={styles.buttonImage} source={emotionImages[7]}/><Text style={styles.buttonText}>Confused</Text></TouchableOpacity>\n                    <TouchableOpacity style={styles.emotionButton} activeOpacity={0.5} onPress={() => getEmotion(8)}><Image style={styles.buttonImage} source={emotionImages[8]}/><Text style={styles.buttonText}>Tired</Text></TouchableOpacity>\n                    <TouchableOpacity style={styles.emotionButton} activeOpacity={0.5} onPress={() => getEmotion(9)}><Text style={styles.buttonText}>None</Text></TouchableOpacity>\n                  </View>\n                </View>\n              </View>\n            </Modal>\n          </View>\n        )\n};\n\nconst styles = StyleSheet.create({\n  chatBotContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#E5E5E5',\n  },\n  buttonContainer: {\n    justifyContent: 'center', \n    flexDirection: \"row\",\n    justifyContent: 'space-around',\n    alignItems: 'center',\n    marginTop: 30,\n  },\n  button: {\n    width: '40%',\n    height: 50,\n    borderRadius: 20,\n    backgroundColor: \"#61dafb\",\n  },\n  chatButtonText: {\n    justifyContent: 'center',\n    textAlign: 'center',\n    fontWeight: 'bold',\n    lineHeight: 50,\n  },\n  emotionPopUp: {\n    backgroundColor: \"#ffffff\",\n    flex: 1,\n    display: 'flex',\n    flexWrap: 'wrap',\n    alignContent: 'center',\n    justifyContent: 'center',\n  },\n  emotionContainer: {\n    marginTop: 10,\n    marginBottom: 10,\n    borderRadius: 10,\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    alignContent: 'center',\n    justifyContent: 'center'\n  },\n  emotionButton: {\n    marginVertical: 10,\n    marginHorizontal: 10,\n    borderRadius: 10,\n    padding: 10,\n    backgroundColor: '#f0f8ff',\n    justifyContent: 'center',\n    alignItems: 'center',\n    minWidth: \"35%\",\n    height: 100\n  },\n  buttonText: {\n    textAlign: 'center',\n    fontWeight: 'bold',\n    fontSize: 14,\n    margin: 5\n  },\n  buttonImage: {\n    width: 50,\n    height: 50,\n  }\n});","import * as React from 'react';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport HomeScreen from '../screens/HomeScreen';\nimport ChatbotScreen from '../screens/ChatbotScreen';\n\nconst Stack = createStackNavigator();\n\nexport default function AppStack() {\n    return (\n        <Stack.Navigator screenOptions={{ headerShown: false }} >\n            <Stack.Screen name='Home' component={HomeScreen} />\n            <Stack.Screen name='Chatbot' component={ChatbotScreen} options={{ headerShown: true }}/>\n        </Stack.Navigator>\n    );\n}","  import React from 'react';\nimport { View, ActivityIndicator, StyleSheet } from 'react-native';\n\nexport default function Loading() {\n  return (\n    <View style={styles.container}>\n      <ActivityIndicator size='large' color='#6646ee' />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","import React, { useState, useEffect, useContext } from 'react';\nimport { firebase } from '../firebase/config'\nimport { NavigationContainer } from '@react-navigation/native';\nimport { AuthContext, AuthProvider } from './AuthProvider';\nimport AuthStack from './AuthStack';\nimport AppStack from './AppStack';\nimport LoadingScreen from '../screens/LoadingScreen';\n\nexport default function Routes() {\n    const [initializing, setInitializing] = useState(true);\n    const [loading, setLoading] = useState(true);\n    const { user, setUser } = useContext(AuthContext);\n\n    function onAuthStateChanged(result) {\n        setUser(result);\n        if (initializing) setInitializing(false);\n        setLoading(false);\n    }\n\n    useEffect(() => {\n        const subscriber = firebase.auth().onAuthStateChanged(onAuthStateChanged)\n        return subscriber\n    }, [])\n\n    if (loading) {\n        return <LoadingScreen />\n    }\n\n    return (\n        <NavigationContainer>\n            {user ? <AppStack /> : <AuthStack />}\n        </NavigationContainer>\n    )\n}","import React from 'react';\nimport { AuthProvider } from './AuthProvider';\nimport Routes from './Routes';\n\nexport default function Providers() {\n    return (\n        <AuthProvider>\n            <Routes />\n        </AuthProvider>\n    );\n}","import React from 'react';\nimport { LogBox, Platform } from 'react-native';\nimport Providers from './app/navigation';\n\nif (Platform.OS !== 'web') {\n  LogBox.ignoreLogs(['Setting a timer'])\n}\n\nexport default function App() {\n  return <Providers />\n}\n","module.exports = __webpack_public_path__ + \"static/media/happy.27dd8248.png\";","module.exports = __webpack_public_path__ + \"static/media/sad.926c6a25.png\";","module.exports = __webpack_public_path__ + \"static/media/angry.d77d9f67.png\";","module.exports = __webpack_public_path__ + \"static/media/crying.ed602d4f.png\";","module.exports = __webpack_public_path__ + \"static/media/laugh.01b38b48.png\";","module.exports = __webpack_public_path__ + \"static/media/nervous.7eafbb21.png\";","module.exports = __webpack_public_path__ + \"static/media/surprised.69a1cc83.png\";","module.exports = __webpack_public_path__ + \"static/media/confused.e3b541c3.png\";","module.exports = __webpack_public_path__ + \"static/media/tired.a7af9aa7.png\";"],"sourceRoot":""}