{"version":3,"sources":["app/assets/background.jpg","app/assets/logo.png","app/assets/emotions/happy.png","app/assets/emotions/sad.png","app/assets/emotions/angry.png","app/assets/emotions/crying.png","app/assets/emotions/laugh.png","app/assets/emotions/nervous.png","app/assets/emotions/surprised.png","app/assets/emotions/confused.png","app/assets/emotions/tired.png","app/firebase/config.js","app/navigation/AuthProvider.js","app/screens/WelcomeScreen.js","app/screens/LoginScreen.js","app/screens/RegistrationScreen.js","app/navigation/AuthStack.js","app/screens/HomeScreen.js","app/screens/ChatbotScreen.js","app/screens/Modal.js","app/navigation/AppStack.js","app/screens/LoadingScreen.js","app/navigation/Routes.js","app/navigation/index.js","App.js"],"names":["module","exports","firebase","apps","length","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","AuthContext","createContext","AuthProvider","children","useState","user","setUser","Provider","value","login","email","password","a","async","auth","signInWithEmailAndPassword","Alert","alert","register","name","createUserWithEmailAndPassword","currentUser","firestore","collection","doc","uid","set","_id","logout","signOut","WelcomeScreen","navigation","ImageBackground","style","styles","background","source","require","View","logoContainer","Image","logo","Text","logoText","TouchableOpacity","loginButton","onPress","navigate","loginButtonText","registerButton","registerButtonText","StyleSheet","create","flex","height","justifyContent","alignItems","width","backgroundColor","marginLeft","marginRight","marginBottom","borderRadius","position","top","fontWeight","color","fontSize","LoginScreen","setEmail","setPassword","useContext","container","blurRadius","keyboardShouldPersistTaps","TextInput","input","placeholder","placeholderTextColor","onChangeText","text","underlineColorAndroid","autoCapitalize","secureTextEntry","button","buttonTitle","footerView","footerText","footerLink","title","alignSelf","margin","overflow","marginTop","paddingLeft","RegistrationScreen","setName","confirmPassword","setConfirmPassword","onRegisterPress","borderColor","Stack","createStackNavigator","AuthStack","Navigator","screenOptions","headerShown","Screen","component","options","HomeScreen","useEffect","isMounted","get","exists","data","console","log","getUserInfo","greeting","buttonText","logOutButton","emotionImages","Modal","props","Platform","OS","emotions","ChatbotScreen","currentMessage","setCurrentMessage","showEmotions","setShowEmotions","chatsRef","query","orderBy","useCollectionData","idField","messages","id","setId","useLayoutEffect","getEmotion","index","add","createdAt","Date","parse","emotionIndex","emotion","sendMessage","chatBotContainer","onSend","Keyboard","dismiss","renderAvatar","messageInfo","emotionImage","rounded","size","createAvatar","showUserAvatar","showAvatarForEveryMessage","renderAllAvatars","renderBubble","textStyle","right","left","timeTextStyle","wrapperStyle","createBubble","alwaysShowSend","transparent","visible","emotionPopUp","textAlign","emotionContainer","emotionButton","activeOpacity","buttonImage","display","flexWrap","alignContent","flexDirection","marginVertical","marginHorizontal","padding","minWidth","AppStack","Loading","ActivityIndicator","Routes","initializing","setInitializing","loading","setLoading","onAuthStateChanged","result","NavigationContainer","Providers","App","LogBox","ignoreLogs"],"mappings":"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","file":"static/js/app.ecd761a9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.afe8d931.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.993f2c0b.png\";","module.exports = __webpack_public_path__ + \"static/media/happy.27dd8248.png\";","module.exports = __webpack_public_path__ + \"static/media/sad.926c6a25.png\";","module.exports = __webpack_public_path__ + \"static/media/angry.d77d9f67.png\";","module.exports = __webpack_public_path__ + \"static/media/crying.ed602d4f.png\";","module.exports = __webpack_public_path__ + \"static/media/laugh.01b38b48.png\";","module.exports = __webpack_public_path__ + \"static/media/nervous.7eafbb21.png\";","module.exports = __webpack_public_path__ + \"static/media/surprised.69a1cc83.png\";","module.exports = __webpack_public_path__ + \"static/media/confused.e3b541c3.png\";","module.exports = __webpack_public_path__ + \"static/media/tired.a7af9aa7.png\";","import firebase from 'firebase';\r\nimport '@firebase/auth'\r\nimport '@firebase/firestore'\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBLo3MIDiCutOt63VqJNkEMgLbI71gxBDE\",\r\n  authDomain: \"chatapp-6a550.firebaseapp.com\",\r\n  databaseURL: \"https://chatapp-6a550-default-rtdb.firebaseio.com\",\r\n  projectId: \"chatapp-6a550\",\r\n  storageBucket: \"chatapp-6a550.appspot.com\",\r\n  messagingSenderId: \"432038414833\",\r\n  appId: \"1:432038414833:web:6a8228bf2fd1f997219c50\"\r\n};\r\n\r\nif (firebase.apps.length === 0) {\r\n    firebase.initializeApp(firebaseConfig)\r\n}\r\n\r\nexport { firebase }\r\n","import React, { createContext, useState } from 'react';\r\nimport { Alert } from 'react-native';\r\nimport { firebase } from '../firebase/config'\r\n\r\nexport const AuthContext = createContext({});\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n\r\n    return (\r\n        <AuthContext.Provider\r\n            value={{\r\n                user,\r\n                setUser,\r\n                login: async (email, password) => {\r\n                    try {\r\n                        await firebase.auth().signInWithEmailAndPassword(email, password);\r\n                    } catch (error) {\r\n                        Alert.alert('Error', error+\"\");\r\n                    }\r\n                },\r\n                register: async (email, password, name) => {\r\n                    try { \r\n                        await firebase.auth().createUserWithEmailAndPassword(email, password);\r\n                        const currentUser = firebase.auth().currentUser;\r\n                        const db = firebase.firestore();\r\n                        db.collection('users')\r\n                            .doc(currentUser.uid)\r\n                            .set({\r\n                                _id: currentUser.uid,\r\n                                email: currentUser.email,\r\n                                name: name\r\n                        });\r\n                    } catch (error) {\r\n                        Alert.alert('Error', error+\"\");\r\n                    }\r\n                },\r\n                logout: async () => {\r\n                    try {\r\n                        await firebase.auth().signOut();\r\n                    } catch (error) {\r\n                        Alert.alert('Error', error+\"\");\r\n                    }\r\n                }\r\n            }}\r\n        >\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};","import { Image, ImageBackground, StyleSheet, View, Text, TouchableOpacity } from 'react-native';\r\nimport React from 'react';\r\n\r\nexport default function WelcomeScreen({ navigation }) {\r\n    return (\r\n        <ImageBackground \r\n            style={styles.background}\r\n            source={require(\"../assets/background.jpg\")} >\r\n            <View style={styles.logoContainer}>\r\n                <Image source={require(\"../assets/logo.png\")} style={styles.logo}/>\r\n                <Text style={styles.logoText} >MIND BOT</Text>\r\n            </View>\r\n            <TouchableOpacity\r\n                style={styles.loginButton} \r\n                onPress={() => navigation.navigate(\"Login\")}>\r\n                <Text style={styles.loginButtonText}>Sign In</Text>\r\n            </TouchableOpacity>\r\n            <TouchableOpacity\r\n                style={styles.registerButton}\r\n                onPress={() => navigation.navigate(\"Registration\")}>\r\n                <Text style={styles.registerButtonText}>Create Account</Text>\r\n            </TouchableOpacity>\r\n        </ImageBackground>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    background: {\r\n        flex: 1,\r\n        height: '100%',\r\n        justifyContent: \"flex-end\",\r\n        alignItems: 'center'\r\n    },\r\n    loginButton: {\r\n        width: \"80%\",\r\n        backgroundColor: '#788eec',\r\n        marginLeft: 30,\r\n        marginRight: 30,\r\n        marginBottom: 20,\r\n        height: 48,\r\n        borderRadius: 5,\r\n        alignItems: \"center\",\r\n        justifyContent: 'center'\r\n    },\r\n    registerButton: {\r\n        width: \"80%\",\r\n        backgroundColor: '#ffffff',\r\n        marginLeft: 30,\r\n        marginRight: 30,\r\n        marginBottom: 50,\r\n        height: 48,\r\n        borderRadius: 5,\r\n        alignItems: \"center\",\r\n        justifyContent: 'center'\r\n    },\r\n    logo: {\r\n        width: 100,\r\n        height: 100,\r\n    },\r\n    logoContainer: {\r\n        position: 'absolute',\r\n        top: 90,\r\n        alignItems: 'center',\r\n    },\r\n    logoText: {\r\n        fontWeight: 'bold',\r\n        color: '#ffffff'\r\n    },\r\n    loginButtonText: {\r\n        fontSize: 20,\r\n        fontWeight: 'bold',\r\n        color: 'white',\r\n    },\r\n    registerButtonText: {\r\n        fontSize: 20,\r\n        fontWeight: 'bold',\r\n        color: '#788eec',\r\n    }\r\n})\r\n","import React, { useState, useContext } from 'react'\r\nimport { StyleSheet, Image, Text, TextInput, TouchableOpacity, View, ImageBackground } from 'react-native'\r\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\r\nimport { AuthContext } from '../navigation/AuthProvider';\r\n\r\nexport default function LoginScreen({navigation}) {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const { login } = useContext(AuthContext);\r\n\r\n    const onFooterLinkPress = () => {\r\n        navigation.navigate('Registration');\r\n    }\r\n\r\n    const onLoginPress = () => {\r\n        if (!email) {\r\n            Alert.alert('Email field is required.');\r\n        } else if (!password) {\r\n            Alert.alert('Password field is required.');\r\n        } else {\r\n            login(email, password);\r\n            setEmail('');\r\n            setPassword('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ImageBackground \r\n            style={styles.container}\r\n            source={require(\"../assets/background.jpg\")} \r\n            blurRadius={5} >\r\n            <KeyboardAwareScrollView\r\n                style={{ flex: 1, width: '100%' }}\r\n                keyboardShouldPersistTaps=\"always\">\r\n                <Image\r\n                    style={styles.logo}\r\n                    source={require('../assets/logo.png')}\r\n                />\r\n                <TextInput\r\n                    style={styles.input}\r\n                    placeholder='E-mail'\r\n                    placeholderTextColor=\"#aaaaaa\"\r\n                    onChangeText={(text) => setEmail(text)}\r\n                    value={email}\r\n                    underlineColorAndroid=\"transparent\"\r\n                    autoCapitalize=\"none\"\r\n                />\r\n                <TextInput\r\n                    style={styles.input}\r\n                    placeholderTextColor=\"#aaaaaa\"\r\n                    secureTextEntry\r\n                    placeholder='Password'\r\n                    onChangeText={(text) => setPassword(text)}\r\n                    value={password}\r\n                    underlineColorAndroid=\"transparent\"\r\n                    autoCapitalize=\"none\"\r\n                />\r\n                <TouchableOpacity\r\n                    style={styles.button}\r\n                    onPress={() => onLoginPress()}>\r\n                    <Text style={styles.buttonTitle}>Log in</Text>\r\n                </TouchableOpacity>\r\n                <View style={styles.footerView}>\r\n                    <Text style={styles.footerText}>Don't have an account? <Text onPress={onFooterLinkPress} style={styles.footerLink}>Sign up</Text></Text>\r\n                </View>\r\n            </KeyboardAwareScrollView>\r\n        </ImageBackground>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        alignItems: 'center'\r\n    },\r\n    title: {\r\n\r\n    },\r\n    logo: {\r\n        flex: 1,\r\n        height: 120,\r\n        width: 120,\r\n        alignSelf: \"center\",\r\n        margin: 30\r\n    },\r\n    input: {\r\n        height: 48,\r\n        borderRadius: 5,\r\n        overflow: 'hidden',\r\n        backgroundColor: 'white',\r\n        marginTop: 10,\r\n        marginBottom: 10,\r\n        marginLeft: 30,\r\n        marginRight: 30,\r\n        paddingLeft: 16\r\n    },\r\n    button: {\r\n        backgroundColor: '#788eec',\r\n        marginLeft: 30,\r\n        marginRight: 30,\r\n        marginTop: 20,\r\n        height: 48,\r\n        borderRadius: 5,\r\n        alignItems: \"center\",\r\n        justifyContent: 'center'\r\n    },\r\n    buttonTitle: {\r\n        color: 'white',\r\n        fontSize: 16,\r\n        fontWeight: \"bold\"\r\n    },\r\n    footerView: {\r\n        flex: 1,\r\n        alignItems: \"center\",\r\n        marginTop: 20\r\n    },\r\n    footerText: {\r\n        fontSize: 16,\r\n        color: '#ffffff'\r\n    },\r\n    footerLink: {\r\n        color: \"#788eec\",\r\n        fontWeight: \"bold\",\r\n        fontSize: 16\r\n    }\r\n})\r\n","import React, { useState, useContext } from 'react'\r\nimport { StyleSheet, Image, Text, TextInput, TouchableOpacity, View, ImageBackground } from 'react-native'\r\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\r\nimport { AuthContext } from '../navigation/AuthProvider';\r\n\r\nexport default function RegistrationScreen({navigation}) {\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const { register } = useContext(AuthContext);\r\n\r\n    const onFooterLinkPress = () => {\r\n        navigation.navigate('Login');\r\n    }\r\n\r\n    const onRegisterPress = () => {\r\n        if (!name) {\r\n            Alert.alert('Name is required.');\r\n        } else if (!email) {\r\n            Alert.alert('Email is required.');\r\n        } else if (!password) {\r\n            Alert.alert('Password is required.');\r\n        } else if (password !== confirmPassword) {\r\n            Alert.alert(\"Passwords don't match\");\r\n            return\r\n        } else {\r\n            register(email, password, name);\r\n            setName('');\r\n            setEmail('');\r\n            setPassword('');\r\n            setConfirmPassword('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ImageBackground \r\n            style={styles.container}\r\n            source={require(\"../assets/background.jpg\")} \r\n            blurRadius={5}  >\r\n            <KeyboardAwareScrollView\r\n                style={{ flex: 1, width: '100%' }}\r\n                keyboardShouldPersistTaps=\"always\">\r\n                <Image\r\n                    style={styles.logo}\r\n                    source={require('../assets/logo.png')}\r\n                />\r\n                <TextInput\r\n                    style={styles.input}\r\n                    placeholder='Name'\r\n                    placeholderTextColor=\"#aaaaaa\"\r\n                    onChangeText={(text) => setName(text)}\r\n                    value={name}\r\n                    underlineColorAndroid=\"transparent\"\r\n                    autoCapitalize=\"none\"\r\n                />\r\n                <TextInput\r\n                    style={styles.input}\r\n                    placeholder='E-mail'\r\n                    placeholderTextColor=\"#aaaaaa\"\r\n                    onChangeText={(text) => setEmail(text)}\r\n                    value={email}\r\n                    underlineColorAndroid=\"transparent\"\r\n                    autoCapitalize=\"none\"\r\n                />\r\n                <TextInput\r\n                    style={styles.input}\r\n                    placeholderTextColor=\"#aaaaaa\"\r\n                    secureTextEntry\r\n                    placeholder='Password'\r\n                    onChangeText={(text) => setPassword(text)}\r\n                    value={password}\r\n                    underlineColorAndroid=\"transparent\"\r\n                    autoCapitalize=\"none\"\r\n                />\r\n                <TextInput\r\n                    style={styles.input}\r\n                    placeholderTextColor=\"#aaaaaa\"\r\n                    secureTextEntry\r\n                    placeholder='Confirm Password'\r\n                    onChangeText={(text) => setConfirmPassword(text)}\r\n                    value={confirmPassword}\r\n                    underlineColorAndroid=\"transparent\"\r\n                    autoCapitalize=\"none\"\r\n                />\r\n                <TouchableOpacity\r\n                    style={styles.button}\r\n                    onPress={() => onRegisterPress()}>\r\n                    <Text style={styles.buttonTitle}>Create account</Text>\r\n                </TouchableOpacity>\r\n                <View style={styles.footerView}>\r\n                    <Text style={styles.footerText}>Already got an account? <Text onPress={onFooterLinkPress} style={styles.footerLink}>Log in</Text></Text>\r\n                </View>\r\n            </KeyboardAwareScrollView>\r\n        </ImageBackground>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        alignItems: 'center'\r\n    },\r\n    title: {\r\n\r\n    },\r\n    logo: {\r\n        flex: 1,\r\n        height: 120,\r\n        width: 120,\r\n        alignSelf: \"center\",\r\n        margin: 30\r\n    },\r\n    input: {\r\n        height: 48,\r\n        borderRadius: 5,\r\n        overflow: 'hidden',\r\n        backgroundColor: 'white',\r\n        marginTop: 10,\r\n        marginBottom: 10,\r\n        marginLeft: 30,\r\n        marginRight: 30,\r\n        paddingLeft: 16,\r\n        borderColor: \"black\"\r\n    },\r\n    button: {\r\n        backgroundColor: '#788eec',\r\n        marginLeft: 30,\r\n        marginRight: 30,\r\n        marginTop: 20,\r\n        height: 48,\r\n        borderRadius: 5,\r\n        alignItems: \"center\",\r\n        justifyContent: 'center'\r\n    },\r\n    buttonTitle: {\r\n        color: 'white',\r\n        fontSize: 16,\r\n        fontWeight: \"bold\"\r\n    },\r\n    footerView: {\r\n        flex: 1,\r\n        alignItems: \"center\",\r\n        marginTop: 20\r\n    },\r\n    footerText: {\r\n        fontSize: 16,\r\n        color: '#ffffff'\r\n    },\r\n    footerLink: {\r\n        color: \"#788eec\",\r\n        fontWeight: \"bold\",\r\n        fontSize: 16\r\n    }\r\n})","import * as React from 'react';\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\nimport WelcomeScreen from '../screens/WelcomeScreen';\r\nimport LoginScreen from '../screens/LoginScreen';\r\nimport RegistrationScreen from '../screens/RegistrationScreen';\r\n\r\nconst Stack = createStackNavigator()\r\n\r\nexport default function AuthStack() {\r\n    return (\r\n        <Stack.Navigator screenOptions={{ headerShown: true }}>\r\n            <Stack.Screen name='Welcome' component={WelcomeScreen} options={{ headerShown: false }} />\r\n            <Stack.Screen name='Login' component={LoginScreen} />\r\n            <Stack.Screen name='Registration' component={RegistrationScreen} />\r\n        </Stack.Navigator>\r\n    );\r\n}","import React, { useContext, useState, useEffect } from 'react';\r\nimport { StyleSheet, TouchableOpacity, Text, ImageBackground } from 'react-native';\r\nimport { firebase } from '../firebase/config';\r\nimport { AuthContext } from '../navigation/AuthProvider';\r\n\r\nexport default function HomeScreen({ navigation }) {\r\n    const { user, logout } = useContext(AuthContext);\r\n    const [name, setName] = useState('');\r\n\r\n    const onLogOutPress = () => {\r\n        logout();\r\n    }\r\n\r\n    useEffect(() => {\r\n        let isMounted = true;\r\n        async function getUserInfo() {\r\n            try {\r\n                let doc = await firebase\r\n                    .firestore()\r\n                    .collection('users')\r\n                    .doc(user.uid)\r\n                    .get();\r\n\r\n                if (!doc.exists) {\r\n                    console.log('User data not found');\r\n                } else {\r\n                    let data = doc.data();\r\n                    if (isMounted) setName(data.name);\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n        getUserInfo();\r\n        return () => { isMounted = false }\r\n    })\r\n\r\n    return (\r\n        <ImageBackground \r\n            source={require(\"../assets/background.jpg\")}\r\n            blurRadius={1.25}\r\n            style={styles.container}>\r\n            <Text style={styles.greeting}>Hello {name}</Text>\r\n            <TouchableOpacity \r\n                style={styles.button}\r\n                onPress={() => navigation.navigate(\"Home\")} >\r\n                <Text style={styles.buttonText}>Mindfulness</Text>\r\n            </TouchableOpacity>\r\n            <TouchableOpacity \r\n                style={styles.button}\r\n                onPress={() => navigation.navigate(\"Chatbot\")} >\r\n                <Text style={styles.buttonText}>Chat Bot</Text>\r\n            </TouchableOpacity>\r\n            <TouchableOpacity \r\n                style={styles.button}\r\n                onPress={() => navigation.navigate(\"Home\")} >\r\n                <Text style={styles.buttonText}>Instant</Text>\r\n            </TouchableOpacity>\r\n            <TouchableOpacity \r\n                style={styles.logOutButton}\r\n                onPress={onLogOutPress} >\r\n                <Text style={styles.buttonText}>Log Out</Text>\r\n            </TouchableOpacity>\r\n        </ImageBackground>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n    },\r\n    greeting: {\r\n        fontSize: 22,\r\n        fontWeight: 'bold',\r\n        color: '#383838',\r\n        marginTop: 100,\r\n        marginBottom: 30,\r\n    },\r\n    button: {\r\n        width: \"75%\",\r\n        height: 75,\r\n        backgroundColor: '#788eec',\r\n        marginLeft: 30,\r\n        marginRight: 30,\r\n        marginTop: 25,\r\n        marginBottom: 25,\r\n        borderRadius: 5,\r\n        alignItems: \"center\",\r\n        justifyContent: 'center'\r\n    },\r\n    logOutButton: {\r\n        width: \"55%\",\r\n        height: 50,\r\n        backgroundColor: '#ff7269',\r\n        marginLeft: 30,\r\n        marginRight: 30,\r\n        marginTop: 100,\r\n        borderRadius: 5,\r\n        alignItems: \"center\",\r\n        justifyContent: 'center'\r\n    },\r\n    buttonText: {\r\n        fontSize: 20,\r\n        fontWeight: 'bold',\r\n        color: \"white\"\r\n    },\r\n})","import React, { useState, useContext, useLayoutEffect } from 'react';\r\nimport { GiftedChat, Bubble } from 'react-native-gifted-chat';\r\nimport { StyleSheet, View, Image, Text, Keyboard, TouchableOpacity } from 'react-native';\r\nimport { Avatar } from \"react-native-elements\";\r\nimport firebase from 'firebase';\r\nimport 'firebase/firestore';\r\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\r\nimport { createNavigatorFactory } from '@react-navigation/core';\r\nimport Modal from './Modal.js';\r\nimport { AuthContext } from '../navigation/AuthProvider';\r\nimport { Platform } from 'react-native';\r\n\r\nlet emotionImages;\r\n\r\nif (Platform.OS === 'web') {\r\n  emotionImages = [\r\n    require('../assets/emotions/happy.png'),\r\n    require('../assets/emotions/sad.png'),\r\n    require('../assets/emotions/angry.png'),\r\n    require('../assets/emotions/crying.png'),\r\n    require('../assets/emotions/laugh.png'),\r\n    require('../assets/emotions/nervous.png'),\r\n    require('../assets/emotions/surprised.png'),\r\n    require('../assets/emotions/confused.png'),\r\n    require('../assets/emotions/tired.png'),\r\n  ];\r\n} else {\r\n  emotionImages = [\r\n    require('../assets/emotions/happy.png'),\r\n    require('../assets/emotions/sad.png'),\r\n    require('../assets/emotions/angry.png'),\r\n    require('../assets/emotions/crying.png'),\r\n    require('../assets/emotions/laugh.png'),\r\n    require('../assets/emotions/nervous.png'),\r\n    require('../assets/emotions/surprised.png'),\r\n    require('../assets/emotions/confused.png'),\r\n    require('../assets/emotions/tired.png'),\r\n  ];\r\n}\r\n\r\nconst emotions = ['Happy', 'Sad', 'Angry', 'Crying', 'Laughing', 'Nervous', 'Surprised', 'Confused', 'Tired', 'None'];\r\n\r\nexport default function ChatbotScreen({ navigation }, props) {\r\n  \r\n  const [currentMessage, setCurrentMessage] = useState(null);\r\n  const [showEmotions, setShowEmotions] = useState(false);\r\n  const { user } = useContext(AuthContext);\r\n  const db = firebase.firestore();\r\n  const chatsRef = db.collection(user.uid);\r\n  const query = chatsRef.orderBy('createdAt', 'desc');\r\n  const [messages] = useCollectionData(query, { idField: 'id' });\r\n  const [id, setId] = useState('');\r\n  const [name, setName] = useState('');\r\n\r\n  useLayoutEffect(() => {\r\n        let isMounted = true;\r\n        async function getUserInfo() {\r\n            try {\r\n                let doc = await firebase\r\n                    .firestore()\r\n                    .collection('users')\r\n                    .doc(user.uid)\r\n                    .get();\r\n\r\n                if (!doc.exists) {\r\n                    console.log('User data not found');\r\n                } else {\r\n                    let data = doc.data();\r\n                    if (isMounted) {\r\n                      setName(data.name);\r\n                      setId(data._id);\r\n                    } \r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n        getUserInfo();\r\n        return () => { isMounted = false }\r\n    })\r\n\r\n  const sendMessage = (index) => {\r\n\r\n    chatsRef.add({\r\n      _id: currentMessage[0]._id,\r\n      text: currentMessage[0].text,\r\n      createdAt: Date.parse(currentMessage[0].createdAt),\r\n      emotionIndex: index,\r\n      emotion: emotions[index],\r\n      user: {\r\n        _id: id,\r\n        name: name\r\n      }\r\n    })\r\n    setCurrentMessage(null);\r\n  }\r\n\r\n  const createAvatar = (messageInfo) => {\r\n\r\n    if (messageInfo.currentMessage.emotionIndex == emotionImages.length) {\r\n      return null;\r\n\r\n    } else {\r\n\r\n      var emotionImage = emotionImages[messageInfo.currentMessage.emotionIndex];\r\n\r\n      return(\r\n        <Avatar\r\n          rounded\r\n          size = 'medium'\r\n          source = {emotionImage}\r\n        ></Avatar>\r\n      )\r\n    }\r\n  }\r\n\r\n  const createBubble = (messages) => {\r\n\r\n    console.log(messages.currentMessage.user)\r\n\r\n    return (\r\n      <Bubble\r\n        {... messages}\r\n\r\n        textStyle={{\r\n          right: {\r\n            color: 'black',\r\n          },\r\n          left: {\r\n            color: 'black',\r\n          },\r\n        }}\r\n\r\n        timeTextStyle={{\r\n          left: { \r\n             color: 'black' \r\n          },\r\n          right: { \r\n            color:'black'\r\n          } \r\n        }}\r\n\r\n        wrapperStyle={{\r\n          left: {\r\n            backgroundColor: '#F2AE6F',\r\n          },\r\n          right: {\r\n            backgroundColor: '#99BBFF'\r\n          },\r\n        }}\r\n\r\n        user={messages.currentMessage.user}\r\n      />\r\n    )\r\n  }\r\n\r\n  const getEmotion = (index) => {\r\n\r\n    setShowEmotions(false);\r\n    sendMessage(index);\r\n  }\r\n\r\n  return (\r\n          <View style={styles.chatBotContainer}>\r\n            <GiftedChat\r\n              messages={messages}\r\n              user={{\r\n                _id: id,\r\n                name: name\r\n              }}\r\n              onSend={(messages) => {Keyboard.dismiss(); setCurrentMessage(messages); setShowEmotions(true);}}\r\n              renderAvatar={(messages) => createAvatar(messages)}\r\n              showUserAvatar={true}\r\n              showAvatarForEveryMessage={true}\r\n              renderAllAvatars={true}\r\n              renderBubble={(messages) => createBubble(messages)}\r\n              alwaysShowSend={true}\r\n            />\r\n            <Modal transparent={true} visible={showEmotions}>\r\n              <View style={{backgroundColor:\"#000000aa\", flex:1}}>\r\n                <View style={styles.emotionPopUp}>\r\n                  <Text style={{textAlign: 'center'}}>Select an emotion for your message</Text>\r\n                  <View style={styles.emotionContainer}>\r\n                    <TouchableOpacity style={styles.emotionButton} activeOpacity={0.5} onPress={() => getEmotion(0)}><Image style={styles.buttonImage} source={emotionImages[0]}/><Text style={styles.buttonText}>Happy</Text></TouchableOpacity>\r\n                    <TouchableOpacity style={styles.emotionButton} activeOpacity={0.5} onPress={() => getEmotion(1)}><Image style={styles.buttonImage} source={emotionImages[1]}/><Text style={styles.buttonText}>Sad</Text></TouchableOpacity>\r\n                    <TouchableOpacity style={styles.emotionButton} activeOpacity={0.5} onPress={() => getEmotion(2)}><Image style={styles.buttonImage} source={emotionImages[2]}/><Text style={styles.buttonText}>Angry</Text></TouchableOpacity>\r\n                    <TouchableOpacity style={styles.emotionButton} activeOpacity={0.5} onPress={() => getEmotion(3)}><Image style={styles.buttonImage} source={emotionImages[3]}/><Text style={styles.buttonText}>Crying</Text></TouchableOpacity>\r\n                    <TouchableOpacity style={styles.emotionButton} activeOpacity={0.5} onPress={() => getEmotion(4)}><Image style={styles.buttonImage} source={emotionImages[4]}/><Text style={styles.buttonText}>Laughing</Text></TouchableOpacity>\r\n                    <TouchableOpacity style={styles.emotionButton} activeOpacity={0.5} onPress={() => getEmotion(5)}><Image style={styles.buttonImage} source={emotionImages[5]}/><Text style={styles.buttonText}>Nervous</Text></TouchableOpacity>\r\n                    <TouchableOpacity style={styles.emotionButton} activeOpacity={0.5} onPress={() => getEmotion(6)}><Image style={styles.buttonImage} source={emotionImages[6]}/><Text style={styles.buttonText}>Surprised</Text></TouchableOpacity>\r\n                    <TouchableOpacity style={styles.emotionButton} activeOpacity={0.5} onPress={() => getEmotion(7)}><Image style={styles.buttonImage} source={emotionImages[7]}/><Text style={styles.buttonText}>Confused</Text></TouchableOpacity>\r\n                    <TouchableOpacity style={styles.emotionButton} activeOpacity={0.5} onPress={() => getEmotion(8)}><Image style={styles.buttonImage} source={emotionImages[8]}/><Text style={styles.buttonText}>Tired</Text></TouchableOpacity>\r\n                    <TouchableOpacity style={styles.emotionButton} activeOpacity={0.5} onPress={() => getEmotion(9)}><Text style={styles.buttonText}>None</Text></TouchableOpacity>\r\n                  </View>\r\n                </View>\r\n              </View>\r\n            </Modal>\r\n          </View>\r\n        )\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  chatBotContainer: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    backgroundColor: '#E5E5E5',\r\n  },\r\n  emotionPopUp: {\r\n    backgroundColor: \"#ffffff\",\r\n    flex: 1,\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    alignContent: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  emotionContainer: {\r\n    marginTop: 10,\r\n    marginBottom: 10,\r\n    borderRadius: 10,\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    flexWrap: 'wrap',\r\n    alignContent: 'center',\r\n    justifyContent: 'center'\r\n  },\r\n  emotionButton: {\r\n    marginVertical: 10,\r\n    marginHorizontal: 10,\r\n    borderRadius: 10,\r\n    padding: 10,\r\n    backgroundColor: '#f0f8ff',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    minWidth: \"35%\",\r\n    height: 100\r\n  },\r\n  buttonText: {\r\n    textAlign: 'center',\r\n    fontWeight: 'bold',\r\n    fontSize: 14,\r\n    margin: 5\r\n  },\r\n  buttonImage: {\r\n    width: 50,\r\n    height: 50,\r\n  }\r\n});","import React from 'react';\r\nimport WebModal from 'modal-react-native-web';\r\nimport {Modal as AppModal} from 'react-native';\r\nimport { Platform } from 'react-native';\r\n\r\nconst Modal = (props) => {\r\n    if (Platform.OS === 'web') {\r\n        return (\r\n            <WebModal {...props}>\r\n                {props.children}\r\n            </WebModal>\r\n        );\r\n    } else {\r\n        return (\r\n            <AppModal {...props}>\r\n                {props.children}\r\n            </AppModal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Modal;","import * as React from 'react';\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\nimport HomeScreen from '../screens/HomeScreen';\r\nimport ChatbotScreen from '../screens/ChatbotScreen';\r\n\r\nconst Stack = createStackNavigator();\r\n\r\nexport default function AppStack() {\r\n    return (\r\n        <Stack.Navigator screenOptions={{ headerShown: false }} >\r\n            <Stack.Screen name='Home' component={HomeScreen} />\r\n            <Stack.Screen name='Chatbot' component={ChatbotScreen} />\r\n        </Stack.Navigator>\r\n    );\r\n}","  import React from 'react';\r\nimport { View, ActivityIndicator, StyleSheet } from 'react-native';\r\n\r\nexport default function Loading() {\r\n  return (\r\n    <View style={styles.container}>\r\n      <ActivityIndicator size='large' color='#6646ee' />\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    alignItems: 'center',\r\n    justifyContent: 'center'\r\n  }\r\n});","import React, { useState, useEffect, useContext } from 'react';\r\nimport { firebase } from '../firebase/config'\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { AuthContext, AuthProvider } from './AuthProvider';\r\nimport AuthStack from './AuthStack';\r\nimport AppStack from './AppStack';\r\nimport LoadingScreen from '../screens/LoadingScreen';\r\n\r\nexport default function Routes() {\r\n    const [initializing, setInitializing] = useState(true);\r\n    const [loading, setLoading] = useState(true);\r\n    const { user, setUser } = useContext(AuthContext);\r\n\r\n    function onAuthStateChanged(result) {\r\n        setUser(result);\r\n        if (initializing) setInitializing(false);\r\n        setLoading(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        const subscriber = firebase.auth().onAuthStateChanged(onAuthStateChanged)\r\n        return subscriber\r\n    }, [])\r\n\r\n    if (loading) {\r\n        return <LoadingScreen />\r\n    }\r\n\r\n    return (\r\n        <NavigationContainer>\r\n            {user ? <AppStack /> : <AuthStack />}\r\n        </NavigationContainer>\r\n    )\r\n}","import React from 'react';\r\nimport { AuthProvider } from './AuthProvider';\r\nimport Routes from './Routes';\r\n\r\nexport default function Providers() {\r\n    return (\r\n        <AuthProvider>\r\n            <Routes />\r\n        </AuthProvider>\r\n    );\r\n}","import React from 'react';\r\nimport { LogBox, Platform } from 'react-native';\r\nimport Providers from './app/navigation';\r\n\r\nif (Platform.OS !== 'web') {\r\n  LogBox.ignoreLogs(['Setting a timer'])\r\n}\r\n\r\nexport default function App() {\r\n  return <Providers />\r\n}\r\n"],"sourceRoot":""}